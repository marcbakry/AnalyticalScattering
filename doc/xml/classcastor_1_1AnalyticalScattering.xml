<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcastor_1_1AnalyticalScattering" kind="class" language="C++" prot="public">
    <compoundname>castor::AnalyticalScattering</compoundname>
    <includes refid="AnalyticalScattering_8hpp" local="no">AnalyticalScattering.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcastor_1_1AnalyticalScattering_1a4400194156c1c75b9565efb9bf015988" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>matrix&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt; &gt; castor::AnalyticalScattering&lt; T &gt;::sphereHelmholtz</definition>
        <argsstring>(matrix&lt; T &gt; Xobs, T rho, T k, bndc bc, radtyp rt)</argsstring>
        <name>sphereHelmholtz</name>
        <param>
          <type>matrix&lt; T &gt;</type>
          <declname>Xobs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>T</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bndc</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>radtyp</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the exact scattered acoustic field when the obstacle is a sphere. The arguments are:<linebreak/>
<itemizedlist>
<listitem><para><emphasis>Xobs</emphasis> : observation nodes. If <emphasis>bc</emphasis> == farfield, the <emphasis>Xobs</emphasis> are the directions in which the farfield amplitude will be computed.</para>
</listitem><listitem><para><emphasis>rho</emphasis> : radius of the sphere.</para>
</listitem><listitem><para><emphasis>k</emphasis> : wavenumber.</para>
</listitem><listitem><para><emphasis>rt</emphasis> : type of computation (<emphasis>boundary</emphasis>, <emphasis>domain</emphasis>, <emphasis>infinity</emphasis>)</para>
</listitem><listitem><para><emphasis>bc</emphasis> : type of boundary condition (<emphasis>Dirichlet</emphasis>, <emphasis>Neumann</emphasis>) </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="51" column="12" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="51" bodyend="87"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcastor_1_1AnalyticalScattering_1a9bd360e9ed1760fa8caa3db3e0e0914c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double castor::AnalyticalScattering&lt; T &gt;::sphBessel</definition>
        <argsstring>(std::size_t n, double x)</argsstring>
        <name>sphBessel</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="91" column="19" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="91" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classcastor_1_1AnalyticalScattering_1a4745da50de64d70aa96192a76d6e577f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double castor::AnalyticalScattering&lt; T &gt;::sphNeumann</definition>
        <argsstring>(std::size_t n, double x)</argsstring>
        <name>sphNeumann</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="100" column="19" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="100" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classcastor_1_1AnalyticalScattering_1afc0da5aab40235c8621536ef98a90dd8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; castor::AnalyticalScattering&lt; T &gt;::alphaDir</definition>
        <argsstring>(std::size_t n, double x)</argsstring>
        <name>alphaDir</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="110" column="25" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classcastor_1_1AnalyticalScattering_1adbe373476b3a93058599c51b690251a6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>matrix&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt; &gt; castor::AnalyticalScattering&lt; T &gt;::sphereHelmholtzDir</definition>
        <argsstring>(matrix&lt; double &gt;const &amp;theta, matrix&lt; double &gt;const &amp;r, double rho, double k, radtyp rt)</argsstring>
        <name>sphereHelmholtzDir</name>
        <param>
          <type>matrix&lt; double &gt;const &amp;</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>matrix&lt; double &gt;const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>k</declname>
        </param>
        <param>
          <type>radtyp</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="116" column="12" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="116" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classcastor_1_1AnalyticalScattering_1a7b3f3d2fe93e61637ea8e0cea5234c5e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double castor::AnalyticalScattering&lt; T &gt;::djsph</definition>
        <argsstring>(std::size_t n, double x)</argsstring>
        <name>djsph</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="179" column="19" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="179" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classcastor_1_1AnalyticalScattering_1a1a6ee9bb264678c68fcaaf5bd1d26bf5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; castor::AnalyticalScattering&lt; T &gt;::dhsph</definition>
        <argsstring>(std::size_t n, double x)</argsstring>
        <name>dhsph</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="195" column="25" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classcastor_1_1AnalyticalScattering_1a81237f09d86186509f0fcda16dab2e82" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; castor::AnalyticalScattering&lt; T &gt;::alphaNeu</definition>
        <argsstring>(std::size_t n, double x)</argsstring>
        <name>alphaNeu</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="200" column="25" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classcastor_1_1AnalyticalScattering_1ab1d398729e2572548cba001ccb56cf18" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>matrix&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt; &gt; castor::AnalyticalScattering&lt; T &gt;::sphereHelmholtzNeu</definition>
        <argsstring>(matrix&lt; double &gt;const &amp;theta, matrix&lt; double &gt;const &amp;r, double rho, double k, radtyp rt)</argsstring>
        <name>sphereHelmholtzNeu</name>
        <param>
          <type>matrix&lt; double &gt;const &amp;</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>matrix&lt; double &gt;const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>k</declname>
        </param>
        <param>
          <type>radtyp</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="205" column="12" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="205" bodyend="264"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class for the analytical computation of scattered waves when the incident field is a plane wave propagating along the -e_z axis. The obstacle is assumed to be a non-penetrable sphere with various boundary conditions.<linebreak/>
There are three types of computation:<linebreak/>
<itemizedlist>
<listitem><para>field on the surface,<linebreak/>
</para>
</listitem><listitem><para>field in the propagation domain,<linebreak/>
</para>
</listitem><listitem><para>farfield amplitude (amplitude of the 0th-order term of the asymptotic expansion at infinity) </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" line="43" column="1" bodyfile="/home/marc/Documents/programmation/CPP/AnalyticalScattering/include/AnalyticalScattering.hpp" bodystart="42" bodyend="266"/>
    <listofallmembers>
      <member refid="classcastor_1_1AnalyticalScattering_1afc0da5aab40235c8621536ef98a90dd8" prot="private" virt="non-virtual"><scope>castor::AnalyticalScattering</scope><name>alphaDir</name></member>
      <member refid="classcastor_1_1AnalyticalScattering_1a81237f09d86186509f0fcda16dab2e82" prot="private" virt="non-virtual"><scope>castor::AnalyticalScattering</scope><name>alphaNeu</name></member>
      <member refid="classcastor_1_1AnalyticalScattering_1a1a6ee9bb264678c68fcaaf5bd1d26bf5" prot="private" virt="non-virtual"><scope>castor::AnalyticalScattering</scope><name>dhsph</name></member>
      <member refid="classcastor_1_1AnalyticalScattering_1a7b3f3d2fe93e61637ea8e0cea5234c5e" prot="private" virt="non-virtual"><scope>castor::AnalyticalScattering</scope><name>djsph</name></member>
      <member refid="classcastor_1_1AnalyticalScattering_1a9bd360e9ed1760fa8caa3db3e0e0914c" prot="private" virt="non-virtual"><scope>castor::AnalyticalScattering</scope><name>sphBessel</name></member>
      <member refid="classcastor_1_1AnalyticalScattering_1a4400194156c1c75b9565efb9bf015988" prot="public" virt="non-virtual"><scope>castor::AnalyticalScattering</scope><name>sphereHelmholtz</name></member>
      <member refid="classcastor_1_1AnalyticalScattering_1adbe373476b3a93058599c51b690251a6" prot="private" virt="non-virtual"><scope>castor::AnalyticalScattering</scope><name>sphereHelmholtzDir</name></member>
      <member refid="classcastor_1_1AnalyticalScattering_1ab1d398729e2572548cba001ccb56cf18" prot="private" virt="non-virtual"><scope>castor::AnalyticalScattering</scope><name>sphereHelmholtzNeu</name></member>
      <member refid="classcastor_1_1AnalyticalScattering_1a4745da50de64d70aa96192a76d6e577f" prot="private" virt="non-virtual"><scope>castor::AnalyticalScattering</scope><name>sphNeumann</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
